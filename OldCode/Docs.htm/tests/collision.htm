<!doctype html>
<meta charset=utf-8>
<meta content="width=device-width,initial-scale=1" name=viewport>
<title>Collision Tests</title>
<link href=../../common/css/core.css rel=stylesheet>
<style>
#aligned,
#collider{
    background: #fff;
    border-radius: 10px;
    height: 20px;
    left: 140px;
    position: absolute;
    top: 140px;
    width: 20px;
}
#aligned_x,
#aligned_y,
#collider_x,
#collider_y{
    background: #fff;
    height: 6px;
    left: 100px;
    position: absolute;
    top: 147px;
    width: 100px;
}
#aligned_x,
#collider_x{
    background: #f00;
}
#aligned_y,
#collider_y{
    background: #0f0;
}
.display{
    height: 300px;
}
table{
    width: 600px;
}
td{
    border-width: 0;
    position: relative;
}
#wall,
#wall_aligned{
    background: #fff;
    height: 20px;
    left: 0;
    position: absolute;
    top: 140px;
    width: 300px;
}
</style>

<a href=../../index.htm>iterami</a>/<a href=../index.htm>Docs.htm</a>/<a href=index.htm>Tests</a>/Collision
<table>
  <tr class=display>
    <td><div id=wall></div><div id=collider></div><div id=collider_x></div><div id=collider_y></div>
    <td><div id=wall_aligned></div><div id=aligned></div><div id=aligned_x></div><div id=aligned_y></div>
  <tr>
    <td colspan=2><input id=wall_rotation max=360 type=range value=0><div id=wall_rotation_value></div>
      X<input id=change_x step=any type=number value=5><br>
      Y<input id=change_y step=any type=number value=5>
</table>

<script src=../../common/js/core.js></script>
<script>
function repo_init(){
    core_repo_init({
      'events': {
        'change_x': {
          'oninput': update_display,
        },
        'change_y': {
          'oninput': update_display,
        },
        'wall_rotation': {
          'oninput': update_display,
        },
      },
      'root': 'index.htm',
      'title': 'Docs.htm',
      'ui_elements': [
        'aligned',
        'aligned_x',
        'aligned_y',
        'change_x',
        'change_y',
        'collider',
        'collider_x',
        'collider_y',
        'wall',
        'wall_rotation',
        'wall_rotation_value',
      ],
    });

    update_display();
}

function update_display(){
    const rotation = core_elements.wall_rotation.value;
    core_elements.wall_rotation_value.textContent = rotation;
    core_elements.wall.style.transform = 'rotate(' + rotation + 'deg)';

    const collider_transform = ' translateY(-50px)';
    core_elements.aligned.style.transform = collider_transform;
    core_elements.collider.style.transform = 'rotate(' + rotation + 'deg)' + collider_transform;

    const axes = {
      'x': 'translateY(-50px) rotate(' + (360 - rotation) + 'deg)',
      'y': 'translateY(-50px) rotate(' + (360 - rotation + 90) + 'deg)',
    };
    for(const axis in axes){
         const aligned = core_elements['aligned_' + axis];
         const change = core_elements['change_' + axis].value;
         const collider = core_elements['collider_' + axis];

         const width = Math.abs(change) * 10;
         const transform = axes[axis] + ' translateX(' + (width / 2) + 'px)' + (Math.sign(change) > 0
           ? ''
           : ' translateX(' + -width + 'px)');

         aligned.style.left = collider.style.left = (150 - width / 2) + 'px';
         aligned.style.width = collider.style.width = width + 'px';
         collider.style.transform = 'rotate(' + rotation + 'deg) ' + transform;
         aligned.style.transform = transform;
    }
}
</script>
